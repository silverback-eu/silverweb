{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import type { ComputedFields } from \"contentlayer/source-files\";\nimport {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n} from \"contentlayer/source-files\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport type { Options } from \"rehype-pretty-code\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\n\nconst computedFields: ComputedFields = {\n  slug: {\n    type: \"string\",\n    resolve: (post) => `/${post._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: (post) => post._raw.flattenedPath,\n  },\n};\n\nconst META = defineNestedType(() => ({\n  name: \"META\",\n  fields: {\n    author: { type: \"string\" },\n    description: { type: \"string\" },\n    keywords: { type: \"list\", of: { type: \"string\" } },\n    date: { type: \"date\" },\n  },\n}));\n\nexport const IndustryInsights = defineDocumentType(() => ({\n  name: \"IndustryInsights\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    meta: {\n      type: \"nested\",\n      of: META,\n    },\n    published: {\n      type: \"boolean\",\n      required: true,\n    },\n    category: {\n      type: \"enum\",\n      options: [\"company-news\", \"better-work\", \"around-industry\"],\n      required: true,\n    },\n  },\n  computedFields,\n}));\n\nexport default makeSource({\n  contentDirPath: \"industry-insights\",\n  documentTypes: [IndustryInsights],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: [\"subheading-anchor\"],\n            ariaLabel: \"Link to section\",\n          },\n        },\n      ],\n      [\n        rehypePrettyCode,\n        {\n          theme: \"github-dark\",\n          onVisitLine(node) {\n            if (node.children.length === 0) {\n              node.children = [{ type: \"text\", value: \" \" }];\n            }\n          },\n          onVisitHighlightedLine(node) {\n            if (!node.properties.className) return;\n            node.properties.className.push(\"line--highlighted\");\n          },\n        } as Options,\n      ],\n    ],\n  },\n});\n"],
  "mappings": ";AACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,OAAO,4BAA4B;AAEnC,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,OAAO,eAAe;AAEtB,IAAM,iBAAiC;AAAA,EACrC,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,SAAS,IAAI,KAAK,KAAK,aAAa;AAAA,EAChD;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,SAAS,KAAK,KAAK;AAAA,EAC/B;AACF;AAEA,IAAM,OAAO,iBAAiB,OAAO;AAAA,EACnC,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,aAAa,EAAE,MAAM,SAAS;AAAA,IAC9B,UAAU,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IACjD,MAAM,EAAE,MAAM,OAAO;AAAA,EACvB;AACF,EAAE;AAEK,IAAM,mBAAmB,mBAAmB,OAAO;AAAA,EACxD,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI;AAAA,IACN;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS,CAAC,gBAAgB,eAAe,iBAAiB;AAAA,MAC1D,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,gBAAgB;AAAA,EAChC,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY;AAAA,YACV,WAAW,CAAC,mBAAmB;AAAA,YAC/B,WAAW;AAAA,UACb;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,UACP,YAAY,MAAM;AAChB,gBAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,mBAAK,WAAW,CAAC,EAAE,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,YAC/C;AAAA,UACF;AAAA,UACA,uBAAuB,MAAM;AAC3B,gBAAI,CAAC,KAAK,WAAW;AAAW;AAChC,iBAAK,WAAW,UAAU,KAAK,mBAAmB;AAAA,UACpD;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
